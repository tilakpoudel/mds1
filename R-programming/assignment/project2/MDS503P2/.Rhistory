boxplot(
mpg~cyl, data = mtcars
)
qqline(mtcars$mpg, col="red")
qqnorm(mtcars$mpg)
qqline(mtcars$mpg, col="red")
library(chromote)
b <- ChromoteSession$new()
b$Page$navigate("https://example.com")
b$Page$loadEventFired()
cat(substr(content, 1, 500))  # Preview first 500 characters
b$Page$navigate("https://example.com")
Sys.sleep(3)
b$Page$loadEventFired()
str(mtcars)
what(mtcars)
what mtcars
?mtcars
barplot(mtcars$mpg)
hist(mtcars$mpg)
df <- as.data.frame(mtcars)
barplot(df$cyl)
# define as a factor (make category)
f.cyl <- as.factor(df$cyl)
barplot(f.cyl)
barplot(f.cyl)
barplot(table(df$cyl))
talble(df$cyl)
bpd <- table(df$cyl)
# barplot of gear and carb
barplot(df$gear)
barplot(table(df$gear))
# bar plot of mpg (continuous data)
# define class interval
summary(mtcars$mpg)
range(df$mpg)
I <- round(sqrt(R))
r <-33.9 - 10.4
I <- round(sqrt(r))
breaks = seq(10, 35, by=5)
mpg.bin <- cut(
df$mpg,
breaks,
labels = c("10-15", "15-20", "20-25", "25-30", "30-35")
)
mpg.bin
table(mpg.bin)
barplot(mpg.bin)
barplot(table(mpg.bin))
I
hist(df$mpg)
hist(
df$mpg,
col ="steelblue",
main="Histogram of MPG",
xlab = "MPG",
)
abline(
v=mean(df$mpg),
lwd=3,
lty = 2
)
# check with media
qqnorm(df$mpg)
hist(
df$mpg,
col ="steelblue",
main="Histogram of MPG",
xlab = "MPG",
)
abline(
v=median(df$mpg),
lwd=3,
lty = 2
)
abline(
v=3* median(df$mpg) - 2 * mean(df$mpg),
lwd=3,
lty = 2
)
str(mtcars)
barplot(mtcars$mpg)
hist(mtcars$mpg)
hist(mtcars$mpg)
barplot(mtcars$mpg)
df <- as.data.frame(mtcars)
# Data to barplot
str(mtcars)
barplot(mtcars$mpg)
hist(mtcars$mpg)
df <- as.data.frame(mtcars)
barplot(df$cyl)
# define as a factor (make category)
f.cyl <- as.factor(df$cyl)
barplot(f.cyl)
# first we need frequecnies of carz with 4, 6, 8 cylinders
talble(df$cyl)
# first we need frequecnies of carz with 4, 6, 8 cylinders
table(df$cyl)
# barplot of freq of cylinder data
barplot(table(df$cyl))
# airquality
aq <- airquality
stR(aq)
str(aq)
hist(aq$Ozone)
qqnorm(aq$Ozone)
plot(
density(aq$Ozone, na.rm = T)
)
qqline(aq$Ozone, col=2)
shapiro.test(aq$Ozone)
shapiro.test(aq$Ozone)
Ozone
# test the distribution of
hist(aq$Ozone)
plot(
density(aq$Ozone, na.rm = T)
)
qqnorm(aq$Ozone)
qqline(aq$Ozone, col=2)
shapiro.test(aq$Ozone)
# use kolmogrove test
ks.test(aq$Ozone)
# use kolmogrove test
?ks
# use kolmogrove test
?km
# use kolmogrove test
?ks.test
ks.test(aq$Ozone~1)
ks.test(aq$Ozone~1, )
?shapiro.test
hist(aq$Solar.R)
plot(
density(aq$Solar.R, na.rm = T)
)
qqnorm(aq$Solar.R)
qqline(aq$Solar.R, col=2)
shapiro.test(aq$Solar.R)
# test the distribution of ozone
hist(aq$Wind)
plot(
density(aq$Wind, na.rm = T)
)
qqnorm(aq$Wind)
qqline(aq$Wind, col=2)
shapiro.test(aq$Wind)
cars
hist(cars$speed)
plot(
density(cars$speed, na.rm = T)
)
qqnorm(cars$speed)
qqline(cars$speed, col=2)
shapiro.test(cars$speed)
matrix(
rnorm(500),
nrow = 500,
ncol = 1
),
my_ts <- ts(
matrix(
rnorm(500),
nrow = 500,
ncol = 1),
start = c(1950, 1),
frequency = 12
)
my_dates <- seq(
as.Date("2005/1/1"),
by = "month",
length = 50
)
my_factor <- factor(mtcars$cyl)
fun <- function(x) x^2
# create a window for graphs in 2 rows adn 3 columns
par(mfrow = c(2,3))
plot(x,y, main="Scatterplot")
x <- rnorm(500)
y <- x + rnorm(500)
plot(x,y, main="Scatterplot")
plot(my_factor, main="Barplot")
plot(my_factor, rnorm(32), main="Boxplot")
plot(my_ts,  = "Time series")
plot(my_ts,  main= "Time series")
plot(my_dates, rnorms(50), main = "Time based plot")
plot(my_dates, rnorm(50), main = "Time based plot")
plot(fun, 0, 10, main="PLot a function")
# Reset to default mode
par(mfrow=c(1,1))
plot(x, y, main = "Sctterplot")
plot(x, y, main = "Sctterplot")
abline(
v=mean(x),
lwd=3,
lty = 2
)
# Correlation matrix plot
plot(trees[, 1:3], main="Correlation plot")
source("~/projects/tilak/mds1/R-programming/unit3/Session12-multiple-graphs.R")
source("~/projects/tilak/mds1/R-programming/unit3/Session12-multiple-graphs.R")
plot(trees[, 1:3], main="Correlation plot")
# plot type
j <- 1:20
k <-j
par(mfrow=c(1,3))
plot(j,k, type="l", main="L")
plot(j,k, type="l", main="L")
plot(j,k, type="l", main="L", pch = 16)
# usage of log
x <- 1:50
y <- x^3
logx <- log(x)
logy <- log(y)
par(mfrow=c(2,2))
plot(x, y)
plot(x, logy)
plot(logx, y)
plot(logx, logy)
par(mfrow=c(1,1))
# social network analysis
install.packages('igraph')
library(igraph)
library(igraph)
g <- fraph(c(1,2))
g <- graph(c(1,2))
plot(g)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 20
)
# closed graph
g <- graph(c(1,2,2,3,3,4,4,1))
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 20
)
g <- graph(
c(1,2,2,3,3,4,4,1),
directed = F
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 20
)
?plot
g <- graph(
c(1,2,2,3,3,4,4,1),
directed = F,
n=7
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 20
)
g <- graph(
c(1,2,2,3,3,4,4,1,1,5),
directed = F,
n=7
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 20
)
g <- graph(
c(1,2,2,3,3,4,4,1),
directed = F,
n=7
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 20
)
g[]
print(g[])
g <- graph(
c("Sita", "Ram", "Ram", "Rita", "Rita", "Sita", "Sita", "Rita", "Anju", "Ram")
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 5
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 20
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 1
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 5
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 150
)
plot(g,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 1
)
?plot
g1 <- graph(
c("Sita", "Ram", "Ram", "Rita", "Rita", "Sita", "Sita", "Rita", "Anju", "Ram")
)
plot(g1,
vertex.color = "green",
vertex.size = 40,
edge.color = "red",
edge.size = 1
)
print(g1)
# see the metrics
degree(g1)
degree(g1, mode = all)
degree(g1, mode = "all")
degree(g1, mode = "in")
degree(g1, mode="out")
diameter((g1, directed = F, weights = NA))
diameter(g1, directed = F, weights = NA)
# edge density
edge_density(g1, loops=F)
diameter(g1, directed = F, weights = NA)
ecount(g1/(vcount(g1) * vcount(g1) - 1))
ecount(g1/(vcount(g1) * vcount(g1) - 1))
ecount(g1)/(vcount(g1) * (vcount(g1) - 1))
# Reciprocity : percent reciprocatted ties
reciprocity(g1)
# closeness
closeness(g1, mode = "all", weights = NA)
# Betweeness
betweenness(gs, directed = T, weights = NA)
# Betweeness
betweenness(g1, directed = T, weights = NA)
# edge_betweeness
edge.betweenness(g1, directed = T, weights = NA)
edge.betweenness(g1, directed = T, weights = NA)
?igraph
# edge_betweeness
edge_betweenness(g1, directed = T, weights = NA)
degree(g1, mode = "in")
# Sita  Ram Rita Anju
# 1    2    2    0
# nodes going out of the node
degree(g1, mode="out")
?edge_betweenness
# readat he data
data <- read.csv(file.choose(), header = T)
print(data)
View(data)
library(ggplot2)
ggplot()+
layer(
data = diamonds, mapping = aes(x=carat, y=price),
geom = "point", stat="identity", position = "identity"
)+
scale_y_continuous()+
scale_x_continuous()+
coord_cartesian()
ggplot(diamomds, aes(carat, price))+
geom_point()+
scale_x_continuous()+
scale_y_continuous()
ggplot(diamonds, aes(carat, price))+
geom_point()+
scale_x_continuous()+
scale_y_continuous()
ggplot(diamonds, aes(carat, price))+
geom_point()
?ggplot2
str(diamonds)
# quick plot
qplot(carat, price, data = diamonds)
ggplot(diamonds, aes(
carat, price
)) +
geom_point()+
stat_smooth(method = lm)+
scale_x_log10()+
scale_y_log10()
qplot(carat, price, data = diamonds, geom = c("point", "smooth", ,method="lm", log="xy"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"), method="lm", log="xy")
ggplot(
data = diamonds,
mapping = aes(price)
)+
(geom_histogram(stat = "bin", position = "identity"))
ggplot(diamonds, aex(x=price))+
geom_histogram()
ggplot(diamonds, aes(x=price))+
geom_histogram()
# OR
qplot(price, data=diamonds, geom = "histogram")
?qplot
qplot(price, data=diamonds, geom = "histogram", xlab = "price in $")
# OR
qplot(price, data=diamonds, geom = "histogram", xlab = "price in $", ylab="count")
ggplot(diamonds, aes(x="", fill=clarity))+
geom_bar(width = 1)+
coord_polar(theta="y")+
void_theme()
# pie chart
ggplot(diamonds, aes(x="", fill=clarity))+
geom_bar(width = 1)+
coord_polar(theta="y")
# pie chart
ggplot(diamonds, aes(x="", fill=clarity))+
geom_bar(width = 1)+
coord_polar(theta="y")+
theme_void
# pie chart
ggplot(diamonds, aes(x="", fill=clarity))+
geom_bar(width = 1)+
coord_polar(theta="y")+
theme_void()
# pie chart
ggplot(diamonds, aes(x="", fill=clarity))+
geom_bar(width = 1)+
coord_polar(theta="y")+
# pie chart
ggplot(diamonds, aes(x="", fill=clarity))+
geom_bar(width = 1)+
coord_polar(theta="y")
ggplot(diamonds, aes(x="", fill=clarity))+
geom_bar(width = 1)+
coord_polar(theta="y")+
theme_void()
?mpg
ggplot(mpg, aes(cyl, cty))+
geom_point()
ggplot(data = mpg)+
aes(x=displ, y=hwy)+
geom_point()+
stat_smooth(method = "lm", se=FALSE)
cor(disps, hwy)
cor(disps, hwy)
cor(disps, mpg.hwy)
cor(disps, hwy)
cor.test(disp, hwy)
cor.test(disps, hwy)
cor.test(displ, hwy)
cor.test(mpg$displ, mpg$hwy)
cor(mpg$displ, mpg$hwy)
cor.test(mpg$displ, mpg$hwy)
corpus_copy <- corpus
suppressWarnings({
library(pdftools)
library(tm)
library(magrittr)
library(Rgraphviz)
library(wordcloud)
})
setwd("/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
files <- list.files(pattern = "pdf$")
length(files)
pdf_files <- lapply(files, pdf_text)
corpus <- Corpus(VectorSource(unlist(pdf_files)))
inspect(corpus[1])
corpus_copy <- corpus
suppressWarnings({
corpus <- tm_map(corpus, tolower)
})
inspect(corpus[1:2])
suppressWarnings({
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stemDocument)
})
corpus_copy <- corpus
tdm <- TermDocumentMatrix(corpus, control = list(wordLengths = c(3, Inf)))
low_frequent_terms <- findFreqTerms(tdm, lowfreq = 25)
head(low_frequent_terms)
suppressWarnings({
mat <- as.matrix(tdm)
freq <- mat %>% rowSums() %>%
sort(decreasing = TRUE)
wordcloud(
words = names(freq),
freq = freq,
min.freq = 5,
random.order = FALSE,
colors = brewer.pal(8, "Dark2")
)
})
