# lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
lwd=2,
# 3. Create line chart of date2 and totalCases variables and interpret it carefully (covnep_252days data frame)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
xaxt="n"  # Suppress default x-axis labels
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
)
# Add custom monthly labels
axis.Date(1, at=seq(min(covnep_252days$date2), max(covnep_252days$date2), by="month"), format="%b %Y")
Sys.setlocale("LC_TIME", "C")  # or use "en_US.UTF-8"
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
xaxt="n"  # Suppress default x-axis labels
)
n
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
# xaxt="n"  # Suppress default x-axis labels
)
Sys.setlocale("LC_TIME", "en_US.UTF-8")  # set locale to english
ot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
```
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time"
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
yaxt="n"
)
# Define y-axis labels at 1000 intervals
axis(2, at=seq(0, max(covnep_252days$totalCases), by=1000), las=1)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
yaxt="n"
)
# Define y-axis labels at 1000 intervals
axis(2, at=seq(0, max(covnep_252days$totalCases), by=1000), las=1)
# Define y-axis labels at 1000 intervals
axis(2, at=seq(0, max(covnep_252days$totalCases), by=10000), las=1)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
yaxt="n"
)
# Define y-axis labels at 1000 intervals
axis(2, at=seq(0, max(covnep_252days$totalCases), by=10000), las=1)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
)
plot(
covnep_252days$date2,
covnep_252days$newCases,
type="l",
col="red",
lwd=2,
xlab="Date",
ylab="New cases",
main="New COVID-19 cases over time",
yaxt="n",  # Suppress y-axis labels
)
# 4. Create line chart of date2 and newCases variables and interpret it carefully (covnep_252days data frame)
plot(
covnep_252days$date2,
covnep_252days$newCases,
type="l",
col="red",
lwd=2,
xlab="Date",
ylab="New cases",
main="New COVID-19 cases over time",
)
# 4. Create line chart of date2 and newCases variables and interpret it carefully (covnep_252days data frame)
plot(
covnep_252days$date2,
covnep_252days$newCases,
type="l",
col="red",
lwd=1,
xlab="Date",
ylab="New cases",
main="New COVID-19 cases over time",
)
plot(
covnep_252days$date2,
covnep_252days$newCases,
type="l",
col="red",
lwd=1,
xlab="Date",
ylab="New cases",
main="New COVID-19 cases over time",
)
plot(
covnep_252days$date2,
covnep_252days$newCases,
type="l",
col="red",
lwd=1,
xlab="Date",
ylab="New cases",
main="New COVID-19 cases over time",
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
)
plot(
covnep_252days$date2,
covnep_252days$newCases,
type="l",
col="red",
lwd=1,
xlab="Date",
ylab="New cases",
main="New COVID-19 cases over time",
)
plot(
covnep_252days$date2,
covnep_252days$totalCases,
type="l",
col="blue",
lwd=2,
xlab="Date",
ylab="Total cases",
main="Total COVID-19 cases over time",
)
plot(
covnep_252days$date2,
covnep_252days$newCases,
type="l",
col="red",
lwd=1,
xlab="Date",
ylab="New cases",
main="New COVID-19 cases over time",
)
plot(
covnep_252days$date2,
covnep_252days$totalDeaths,
type="l",
col="green",
lwd=1,
xlab="Date",
ylab="Total deaths",
main="Total COVID-19 deaths over time",
)
plot(
covnep_252days$date2,
covnep_252days$newDeaths,
type="l",
col="purple",
lwd=1,
xlab="Date",
ylab="New deaths",
main="New COVID-19 deaths over time",
)
summary_measures <- sapply(covnep_252days[, c("totalCases", "newCases", "totalRecoveries", "newRecoveries", "totalDeaths", "newDeaths")], function(x) {
c(
mean = mean(x, na.rm = TRUE),
median = median(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
min = min(x, na.rm = TRUE),
max = max(x, na.rm = TRUE)
)
})
summary_measures
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()  # Installs LaTeX distribution
# 8. Import MR_Drugs.xlxs file into R studio as MR_Drugs data frame and create given table (Screenshot 10.55.06 AM) and interpret response percentage and percentage of cases carefully
# import the xlxs file
library(readxl)
MR_Drugs <- read_excel("data/MR_Drugs.xlsx")
knitr::opts_chunk$set(echo = TRUE)
MR_Drugs <- read_excel("data/MR_Drugs.xlsx")
MR_Drugs <- read_excel("MR_Drugs.xlsx")
head(MR_Drugs)
# get sum of every column
colSums(drugs_data)
# get sum of every column
colSums(drugs_data)
# income columns
drugs_data <- MR_Drugs[, c("inco1", "inco2", "inco3", "inco4", "inco5", "inco6", "inco7")]
# get sum of every column
colSums(drugs_data)
# total sum of all columns
total_sum <- sum(colSums(drugs_data))
total_sum
# get percentage of each column across whole data
each_column_percentage_on_all_data <- round(as.numeric(colSums(drugs_data) / total_sum * 100), 1)
each_column_percentage_on_all_data
# get percentage of each column across whole data
round(as.numeric(colSums(!is.na(drugs_data)) / total_sum * 100), 1)
# column names
names(drugs_data)
colSums(!is.na(drugs_data))
levels <- c(names(drugs_data))
levels
income_frequencies <- data.frame(
levels = c(names(drugs_data)),
N = colSums(drugs_data),
Percent = round(as.numeric(colSums(drugs_data) / (total_sum) * 100), 1),
Percent_of_cases = round(as.numeric(colSums(drugs_data) / colSums(!is.na(drugs_data)) * 100), 1)
)
income_frequencies
row.names(income_frequencies) <- NULL
total <- c(
"Total",
sum(as.numeric(income_frequencies$N)),
sum(as.numeric(income_frequencies$Percent)),
sum(as.numeric(income_frequencies$Percent_of_cases))
)
income_frequencies <- rbind(income_frequencies, total)
income_frequencies
freq(SAQ8$q01, cumul = TRUE, round.digits = 1)
# find the frequency of each column
freq(SAQ8$q01, cumul = TRUE, round.digits = 1)
packages.install('summarytools')
install.packages('summarytools')
freq(SAQ8$q01, cumul = TRUE, round.digits = 1)
library('summarytools')
library('summarytools')
suppressWarnings(library(summarytools))
install.packages("summarytools")
suppressWarnings(library(summarytools))
install.packages("summarytools")
suppressWarnings(library(summarytools))
SAQ8 <- read_sav("assignment/project2/SAQ8.sav")
head(SAQ8)
SAQ8 <- read_sav("assignment/project2/SAQ8.sav")
# 9. Import SAQ.sav file into R studio as SAQ data frame and create given tables (e.g Screenshot 11.01.51 for Q1,Q2,Q3) and interpret each frequency table carefully
library(haven)
install.packages("summarytools")
suppressWarnings(library(summarytools))
SAQ8 <- read_sav("assignment/project2/SAQ8.sav")
getwd()
setwd('~/projects/tilak/mds1/R-programming')
getwd()
suppressWarnings(library(summarytools))
SAQ8 <- read_sav("assignment/project2/SAQ8.sav")
head(SAQ8)
# check the structure of the data frame
str(SAQ8)
# find the frequency of each column
freq(SAQ8$q01, cumul = TRUE, round.digits = 1)
freq(SAQ8$q02, cumul = TRUE, round.digits = 1)
freq(SAQ8$q03, cumul = TRUE, round.digits = 1)
library(haven)
install.packages("summarytools")
suppressWarnings(library(summarytools))
SAQ8 <- read_sav("assignment/project2/SAQ8.sav")
library(haven)
suppressWarnings(library(summarytools))
SAQ8 <- read_sav("assignment/project2/SAQ8.sav")
getwd()
setwd('~/projects/tilak/mds1/R-programming')
getwd()
SAQ8 <- read_sav("SAQ8.sav")
head(SAQ8)
library(haven)
suppressWarnings(library(summarytools))
SAQ8 <- read_sav("SAQ8.sav")
head(SAQ8)
# check the structure of the data frame
str(SAQ8)
# find the frequency of each column
freq(SAQ8$q01, cumul = TRUE, round.digits = 1)
freq(SAQ8$q02, cumul = TRUE, round.digits = 1)
freq(SAQ8$q03, cumul = TRUE, round.digits = 1)
old_directory
suppressWarnings({
library(pdftools)
library(tm)
library(magrittr)
library(Rgraphviz)
library(wordcloud)
})
library(pdftools)
install.packages('pdftools')
library(tm)
library(pdftools)
install.packages('pdftools')
install.packages('pdftools')
library(tm)
library(magrittr)
library(Rgraphviz)
install.packages('Rgraphviz')
library(wordcloud)
install.packages('wordcloud')
BiocManager::install("Rgraphviz")
library(Rgraphviz)
library(Rgraphviz)
suppressWarnings({
library(pdftools)
library(tm)
library(magrittr)
library(Rgraphviz)
library(wordcloud)
})
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings({
library(pdftools)
library(tm)
library(magrittr)
library(Rgraphviz)
library(wordcloud)
})
length(files)
setwd("/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
files <- list.files(pattern = "pdf$")
length(files)
length(files)
setwd("/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
files <- list.files(pattern = "pdf$")
length(files)
setwd("/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
files <- list.files(pattern = "pdf$")
length(files)
inspect(corpus[1])
pdf_files <- lapply(files, pdf_text)
corpus <- Corpus(VectorSource(unlist(pdf_files)))
inspect(corpus[1])
corpus_copy <- corpus
suppressWarnings({
corpus <- tm_map(corpus, tolower)
})
inspect(corpus[1:2])
suppressWarnings({
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stemDocument)
})
corpus_copy <- corpus
tdm <- TermDocumentMatrix(corpus, control = list(wordLengths = c(1, Inf)))
low_frequent_terms <- findFreqTerms(tdm, lowfreq = 25)
head(low_frequent_terms)
suppressWarnings({
mat <- as.matrix(tdm)
freq <- mat %>% rowSums() %>%
sort(decreasing = TRUE)
wordcloud(words = names(freq), freq = freq, min.freq = 4, random.order = FALSE)
})
setwd("/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
files <- list.files(pattern = "pdf$")
length(files)
setwd("/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
files <- list.files(pattern = "\\.pdf$", full.names = TRUE)
length(files)
length(files)
files <- list.files(pattern = "\\.pdf$", full.names = TRUE)
setwd("/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
knitr::opts_knit$set(root.dir = "/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
knitr::opts_chunk$set(echo = TRUE)
files <- list.files(pattern = "\\.pdf$", full.names = TRUE)
length(files)
getwd()
knitr::opts_knit$set(root.dir = "/home/tilak/projects/tilak/mds1/R-programming/assignment/project2/MDS503P2")
