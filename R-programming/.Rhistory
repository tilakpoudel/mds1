print(page_title)
remDr <- remoteDriver(
remoteServerAddr = "localhost",  # or the Docker host IP
port = 4444L,
browserName = "chrome",
extraCapabilities = list(
chromeOptions = list(
args = list(
'--no-sandbox',            # Disable sandbox (required in some environments)
'--disable-dev-shm-usage'  # Disable /dev/shm usage
# '--headless'  # Make sure headless is not included
)
)
)
)
# Connect to the running Docker container
# remDr <- remoteDriver(
#   remoteServerAddr = "localhost",
#   port = 4444L,
#   browserName = "chrome"
#   extraCapabilities = chrome_capabilities
# )
# Open browser
remDr$open()
# Navigate and interact
remDr$navigate("https://www.google.com")
Sys.sleep(3)
# Get title to ensure connection works
page_title <- remDr$getTitle()
print(page_title)
library(RSelenium)
# Create a remote driver object
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "firefox"  # Specify Firefox browser
)
library(RSelenium)
# Create a remote driver object
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "firefox"  # Specify Firefox browser
)
# Open the browser
remDr$open()
# Navigate to a website
url <- "https://www.google.com"
remDr$navigate(url)
# Wait for the page to load
Sys.sleep(3)
# Get the title of the page
page_title <- remDr$getTitle()
print(page_title)
# Create a remote driver object with more defined capabilities
remDr <- remoteDriver(
remoteServerAddr = "localhost",   # Ensure this is correct (use container IP if necessary)
port = 4444L,
browserName = "firefox",          # Ensure 'firefox' is specified as the browser
extraCapabilities = list(
"moz:firefoxOptions" = list(
args = list("--headless")     # If you want headless mode, keep this, else remove it
)
)
)
# Open the browser
remDr$open()
# Navigate to a website
url <- "https://www.google.com"
remDr$navigate(url)
# Wait for the page to load
Sys.sleep(3)
# Get the title of the page
page_title <- remDr$getTitle()
print(page_title)
# Extract the page source (for further scraping)
page_source <- remDr$getPageSource()
print(page_source)
# Create a remote driver object with more defined capabilities
remDr <- remoteDriver(
remoteServerAddr = "172.18.0.2",   # Ensure this is correct (use container IP if necessary)
port = 4444L,
browserName = "firefox",          # Ensure 'firefox' is specified as the browser
extraCapabilities = list(
"moz:firefoxOptions" = list(
args = list("--headless")     # If you want headless mode, keep this, else remove it
)
)
)
# Open the browser
remDr$open()
# Navigate to a website
url <- "https://www.google.com"
remDr$navigate(url)
# Wait for the page to load
Sys.sleep(3)
# Get the title of the page
page_title <- remDr$getTitle()
print(page_title)
# Extract the page source (for further scraping)
page_source <- remDr$getPageSource()
print(page_source)
library(RSelenium)
library(RSelenium)
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "chrome"  # Selenium will automatically choose Chromium if it's available
)
remDr$open()
if (is.na(remDr$sessionInfo$id)) {
stop("Failed to create a session. Check Selenium server logs.")
}
suppressWarnings({
library(RSelenium)
library(rvest)
library(jsonlite)
})
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "chrome",
extraCapabilities = list(
chromeOptions = list(
args = list(
'--no-sandbox',            # Disable sandbox (required in some environments)
'--disable-dev-shm-usage'  # Disable /dev/shm usage
# '--headless'  # Make sure headless is not included
)
)
)
)
# Open a connection
remDr$open()
url <- "https://aqicn.org/city/kathmandu/"
# Navigate to a AQI Website
remDr$navigate(url)
webElem <- tryCatch({
remDr$findElement(using = "css selector", ".forecast-body-table")
},
# Explicit wait for the table element (15 seconds max)
webElem <- tryCatch({
remDr$findElement(using = "css selector", ".forecast-body-table")
}, error = function(e) NULL)
# Check if the table appears
if (is.null(webElem)) stop("AQI table still didn't load!")
page_source <- remDr$getPageSource()[[1]]
page_source <- remDr$getPageSource()
aqi_html <- read_html(page_source)
aqi_html <- read_html(remDr$getPageSource() %>% unlist())
source("~/.active-rstudio-document", echo=TRUE)
str(VADeaths)
shape(VADeaths)
head(VADeaths)
gd <- as.data.frame(VADeaths)
barplot(gd$`Rural Male`)
barplot(gd$`Rural Male`, names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"))
View(gd)
barplot(
gd$`Rural Male`,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths Rate in Virginia, USA",
xlab = "Age group",
ylab = "Rate"
)
barplot(
gd$`Rural Male`,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths rate among mane in Virginia, USA",
xlab = "Age group",
ylab = "Rate"
)
barplot(
gd$`Rural Male`,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths rate among rural mane in Virginia, USA",
xlab = "Age group",
ylab = "Rate"
)
barplot(
gd$`Rural Male`,
names.arg = c("50-54", "55-59", "60-64", "65-69"),
main = "Deaths rate among rural male in Virginia, USA",
xlab = "Age group",
ylab = "Rate"
)
barplot(
gd$`Rural Male`,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths rate among rural male in Virginia, USA",
xlab = "Age group",
ylab = "Rate"
)
# Transpose the garph
barplot(
gd$`Rural Male`,
horiz = T,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths rate among rural male in Virginia, USA",
xlab = "Age group",
ylab = "Rate",
col="blue",
border = "red"
)
barplot(
gd$`Rural Male`,
horiz = T,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths rate among rural male in Virginia, USA",
ylab = "Age group",
xlab = "Rate",
col="blue",
border = "red"
)
barplot(
gd$`Rural Male`,
horiz = T,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths rate among rural male in Virginia, USA",
ylab = "Age group",
xlab = "Rate",
col="blue",
border = "red",
xlim = c(0,70),
cex.axis = 0.80 # decrease font size
)
# Add limit
barplot(
gd$`Rural Male`,
horiz = T,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths rate among rural male in Virginia, USA",
ylab = "Age group",
xlab = "Rate",
col="blue",
border = "red",
xlim = c(0,70),
)
barplot(
gd$`Rural Male`,
horiz = T,
names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"),
main = "Deaths rate among rural male in Virginia, USA",
ylab = "Age group",
xlab = "Rate",
col="blue",
border = "red",
xlim = c(0,70), # add limit to the x axis
cex.axis = 0.80 # decrease font size
)
barplot(
gd,
col = c("lightblue", "mistyrose", "lightcyan", "lavender", "cornsilk"),
legend = row.names(VADeaths)
)
gdm <- as.matrix(gd)
barplot(
gdm,
col = c("lightblue", "mistyrose", "lightcyan", "lavender", "cornsilk"),
legend = row.names(VADeaths)
)
gdm <- as.matrix(gd)
barplot(
gdm,
col = c("lightblue", "mistyrose", "lightcyan", "lavender", "cornsilk"),
legend = row.names(gd)
)
barplot(
gdm,
col = c("lightblue", "mistyrose", "lightcyan", "lavender", "cornsilk"),
legend = rownames(gd)
)
gdm <- as.matrix(gd)
barplot(
gdm,
col = c("lightblue", "mistyrose", "lightcyan", "lavender", "cornsilk"),
legend = rownames(gd)
)
barplot(
gdm,
col = my_colors,
legend ("topright", legend = rownames(gdm)),
fill = my_colors, box.lty = 0, cex=0.8
)
barplot(
gdm,
col = my_colors,
legend ("topright", legend = rownames(gdm)),
fill = (my_colors, box.lty = 0, cex=0.8)
barplot(
gdm,
col = my_colors,
legend ("topright", legend = rownames(gdm)),
fill = my_colors,
box.lty = 0,
cex=0.8
)
barplot(
gdm,
col = c("lightblue", "mistyrose", "lightcyan", "lavender", "cornsilk"),
legend = rownames(gdm),
beside = T
)
gd <- as.data.frame(VADeaths)
pie(
gd$`Rural Male`,
labels = rownames(gd),
radius = 1
)
barplot(
gdm,
col = c("lightblue", "mistyrose", "lightcyan", "lavender", "cornsilk"),
legend = rownames(gdm),
beside = T
)
pie(
gd$`Rural Male`,
labels = rownames(gd),
radius = 1
)
pie(
gd$`Rural Male`,
labels = rownames(gd),
radius = 1,
col = c("#999999", "#E69F00", "#56B4E9", "red", "blue")
)
gd$piepercent <- round(100*gd$`Rural Male` / sum(gd$`Rural Male`), 1)
pie(
gd$`Rural Male`,
labels = gd$piepercent,
main = "% Deaths by age groups for Rural male",
col = rainbow(length(gd$`Rural Male`))
)
pie(
gd$`Rural Male`,
labels = gd$piepercent,
main = "% Deaths by age groups for Rural male",
col = rainbow(length(gd$`Rural Male`)),
legend("topright", c("50-54", "55-59", "60-64", "65-69", "70-74"), cex = 0.8, fill = rainbow(length(gd$`Rural Male`)))
)
pie(
gd$`Rural Male`,
labels = gd$piepercent,
main = "% Deaths by age groups for Rural male",
col = rainbow(length(gd$`Rural Male`)),
)
legend("topright", c("50-54", "55-59", "60-64", "65-69", "70-74"), cex = 0.8, fill = rainbow(length(gd$`Rural Male`)))
gdcars
plot(AirPassengers)
plot(AirPassengers)
source("~/projects/tilak/mds1/R-programming/unit3/session11-graphs.R", echo=TRUE)
gdcar <- as.data.frame(cars)
hist(gdcar$speed)
source("~/projects/tilak/mds1/R-programming/unit3/session11-graphs.R", echo=TRUE)
str(gdcar)
hist(
gdcar$speed,
col = "steelblue"
)
hist(
gdcar$speed,
col = "steelblue",
breaks = 10
)
dens <- density(cars$speed)
dens <- density(cars$speed)
qqnorm(cars$speed)
qqnorm(cars$speed)
qqline(cars$speed, col="red")
plot(cars$speed, cars$dist)
plot(
cars$speed,
cars$dist,
xlab = "Speed",
ylab = "Distance"
)
plot(
cars$speed,
cars$dist,
xlab = "Speed",
ylab = "Distance",
main = "Speed vs Distance plot"
)
boxplot(
mpg~cyl, data = mtcars
)
boxplot(
mpg~gear,
data = mtcars,
xlab = "Number of cylinders",
ylab = "Miles per Gallon",
main = "Mielage Data"
)
boxplot(
mpg~cyl, data = mtcars
)
qqline(mtcars$mpg, col="red")
qqnorm(mtcars$mpg)
qqline(mtcars$mpg, col="red")
library(chromote)
b <- ChromoteSession$new()
b$Page$navigate("https://example.com")
b$Page$loadEventFired()
cat(substr(content, 1, 500))  # Preview first 500 characters
b$Page$navigate("https://example.com")
Sys.sleep(3)
b$Page$loadEventFired()
str(mtcars)
what(mtcars)
what mtcars
?mtcars
barplot(mtcars$mpg)
hist(mtcars$mpg)
df <- as.data.frame(mtcars)
barplot(df$cyl)
# define as a factor (make category)
f.cyl <- as.factor(df$cyl)
barplot(f.cyl)
barplot(f.cyl)
barplot(table(df$cyl))
talble(df$cyl)
bpd <- table(df$cyl)
# barplot of gear and carb
barplot(df$gear)
barplot(table(df$gear))
# bar plot of mpg (continuous data)
# define class interval
summary(mtcars$mpg)
range(df$mpg)
I <- round(sqrt(R))
r <-33.9 - 10.4
I <- round(sqrt(r))
breaks = seq(10, 35, by=5)
mpg.bin <- cut(
df$mpg,
breaks,
labels = c("10-15", "15-20", "20-25", "25-30", "30-35")
)
mpg.bin
table(mpg.bin)
barplot(mpg.bin)
barplot(table(mpg.bin))
I
hist(df$mpg)
hist(
df$mpg,
col ="steelblue",
main="Histogram of MPG",
xlab = "MPG",
)
abline(
v=mean(df$mpg),
lwd=3,
lty = 2
)
# check with media
qqnorm(df$mpg)
hist(
df$mpg,
col ="steelblue",
main="Histogram of MPG",
xlab = "MPG",
)
abline(
v=median(df$mpg),
lwd=3,
lty = 2
)
abline(
v=3* median(df$mpg) - 2 * mean(df$mpg),
lwd=3,
lty = 2
)
library(chromote)
library(rvest)
library(dplyr)
session <- ChromoteSession$new()
session$Page$navigate("https://aqicn.org/city/kathmandu")
Sys.sleep(5)
page_html <- session$Runtime$evaluate("document.documentElement.outerHTML")$result$value
document <- read_html(page_html)
forecast_table <- document %>%
html_node(".forecast-body-table table") %>%
html_table() %>%
as_tibble()
print(forecast_table)
session$close()
forecast_table <- t(forecast_table)
forecast_df <- data.frame(forecast_table)
print(forecast_df)
empty_columns <- colSums(is.na(forecast_df)) == nrow(forecast_df)
print(names(empty_columns[empty_columns]))
forecast_df <- forecast_df %>%
select(-c("X1", "X2", "X6", "X10"))
colnames(forecast_df) <- c("day", "hour", "wind_speed_m/s", "temperature", "relative_humidity", "barometric_pressure", "total_precipitation")
print(colnames(forecast_df))
forecast_df <- na.omit(forecast_df)
forecast_df <- forecast_df[-1, ]  # Remove first row
rownames(forecast_df) <- NULL
forecast_df$day_cleaned <- gsub("(st|nd|rd|th)", "", forecast_df$day)
forecast_df <- forecast_df %>%
mutate(date_time = ymd_h(paste0("2025 March ", day_cleaned, " ", hour))) %>%
select(-day_cleaned)
forecast_df$temperature <- gsub("°", "", forecast_df$temperature)
forecast_df$day <- gsub(" [0-9]+(st|nd|rd|th)?", "", forecast_df$day)
rownames(forecast_df) <- forecast_df$date_time
forecast_df <- forecast_df %>%
select(-date_time)
setwd("~/projects/tilak/mds1/R-programming")
output_filename <- paste0("output/air_forecast_kathmandu_", format(Sys.time(), "%Y-%m-%d_%H-%M-%S"), ".csv")
write.csv(forecast_df, output_filename, row.names=TRUE)
head(forecast_df)
