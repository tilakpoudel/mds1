browserName = "chrome",
platformName = "linux",
"goog:chromeOptions" = list(
args = list("--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to Selenium running in Docker
remDr <- remoteDriver(
remoteServerAddr = "172.18.0.2",
port = 4444L,
browserName = "chrome",
extraCapabilities = browser_capabilities
)
# Open connection
remDr$open()
# Test by navigating to a site
remDr$navigate("https://www.google.com")
Sys.sleep(3)  # Let page load
print(remDr$getTitle())
# Define the browser capabilities properly
browser_capabilities <- list(
browserName = "chrome",
platformName = "linux",
"goog:chromeOptions" = list(
args = list("--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to Selenium running in Docker
remDr <- remoteDriver(
remoteServerAddr = "172.18.0.2",
port = 4444L,
browserName = "chrome",
extraCapabilities = browser_capabilities
)
# Open connection
remDr$open()
remDr$navigate("https://www.google.com")
Sys.sleep(3)  # Let page load
print(remDr$getTitle())
library(RSelenium)
# Define capabilities for Docker Selenium
chrome_capabilities <- list(
browserName = "chrome",
"goog:chromeOptions" = list(
args = list("--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to Docker Selenium
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "chrome",
extraCapabilities = chrome_capabilities
)
# Open the browser
remDr$open()
library(RSelenium)
# Define capabilities for Docker Selenium
chrome_capabilities <- list(
browserName = "chrome",
"goog:chromeOptions" = list(
args = list("--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to Docker Selenium
remDr <- remoteDriver(
remoteServerAddr = "http://172.18.0.2/",
port = 4444L,
browserName = "chrome",
extraCapabilities = chrome_capabilities
)
# Open the browser
remDr$open()
library(RSelenium)
# Define capabilities for Docker Selenium
chrome_capabilities <- list(
browserName = "chrome",
"goog:chromeOptions" = list(
args = list("--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to Docker Selenium
remDr <- remoteDriver(
remoteServerAddr = "172.18.0.2",
port = 4444L,
browserName = "chrome",
extraCapabilities = chrome_capabilities
)
# Open the browser
remDr$open()
# Navigate to Google and wait a bit for load
remDr$navigate("https://www.google.com")
Sys.sleep(3)
# Get the page title (this checks if the page loaded properly)
page_title <- remDr$getTitle()
print(page_title)
# Take a screenshot to verify visually (optional)
remDr$screenshot(display = TRUE)
library(RSelenium)
# Define capabilities for Docker Selenium
chrome_capabilities <- list(
browserName = "chrome",
"goog:chromeOptions" = list(
args = list("--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to Docker Selenium
remDr <- remoteDriver(
remoteServerAddr = "172.18.0.2",
port = 4444L,
browserName = "chrome",
extraCapabilities = chrome_capabilities
)
# Open the browser
remDr$open()
# Navigate to Google and wait a bit for load
remDr$navigate("https://www.google.com")
Sys.sleep(3)
# Get the page title (this checks if the page loaded properly)
page_title <- remDr$getTitle()
print(page_title)
library(RSelenium)
# Define Chrome capabilities
chrome_capabilities <- list(
browserName = "chrome",
"goog:chromeOptions" = list(
args = list("--headless", "--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to the running Docker container
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "chrome",
extraCapabilities = chrome_capabilities
)
# Open browser
remDr$open()
library(RSelenium)
# Define Chrome capabilities
chrome_capabilities <- list(
browserName = "chrome",
"goog:chromeOptions" = list(
args = list("--headless", "--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to the running Docker container
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "chrome",
extraCapabilities = chrome_capabilities
)
# Open browser
remDr$open()
# Navigate and interact
remDr$navigate("https://www.google.com")
Sys.sleep(3)
# Get title to ensure connection works
page_title <- remDr$getTitle()
print(page_title)
library(RSelenium)
# Define Chrome capabilities
chrome_capabilities <- list(
browserName = "chrome",
"goog:chromeOptions" = list(
args = list("--headless", "--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage")
)
)
# Connect to the running Docker container
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "chrome"
# extraCapabilities = chrome_capabilities
)
# Open browser
remDr$open()
# Navigate and interact
remDr$navigate("https://www.google.com")
Sys.sleep(3)
# Get title to ensure connection works
page_title <- remDr$getTitle()
print(page_title)
remDr <- remoteDriver(
remoteServerAddr = "localhost",  # or the Docker host IP
port = 4444L,
browserName = "chrome",
extraCapabilities = list(
chromeOptions = list(
args = list(
'--no-sandbox',            # Disable sandbox (required in some environments)
'--disable-dev-shm-usage'  # Disable /dev/shm usage
# '--headless'  # Make sure headless is not included
)
)
)
)
# Connect to the running Docker container
# remDr <- remoteDriver(
#   remoteServerAddr = "localhost",
#   port = 4444L,
#   browserName = "chrome"
#   extraCapabilities = chrome_capabilities
# )
# Open browser
remDr$open()
# Navigate and interact
remDr$navigate("https://www.google.com")
Sys.sleep(3)
# Get title to ensure connection works
page_title <- remDr$getTitle()
print(page_title)
library(RSelenium)
# Create a remote driver object
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "firefox"  # Specify Firefox browser
)
library(RSelenium)
# Create a remote driver object
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4444L,
browserName = "firefox"  # Specify Firefox browser
)
# Open the browser
remDr$open()
# Navigate to a website
url <- "https://www.google.com"
remDr$navigate(url)
# Wait for the page to load
Sys.sleep(3)
# Get the title of the page
page_title <- remDr$getTitle()
print(page_title)
# Create a remote driver object with more defined capabilities
remDr <- remoteDriver(
remoteServerAddr = "localhost",   # Ensure this is correct (use container IP if necessary)
port = 4444L,
browserName = "firefox",          # Ensure 'firefox' is specified as the browser
extraCapabilities = list(
"moz:firefoxOptions" = list(
args = list("--headless")     # If you want headless mode, keep this, else remove it
)
)
)
# Open the browser
remDr$open()
# Navigate to a website
url <- "https://www.google.com"
remDr$navigate(url)
# Wait for the page to load
Sys.sleep(3)
# Get the title of the page
page_title <- remDr$getTitle()
print(page_title)
# Extract the page source (for further scraping)
page_source <- remDr$getPageSource()
print(page_source)
# Create a remote driver object with more defined capabilities
remDr <- remoteDriver(
remoteServerAddr = "172.18.0.2",   # Ensure this is correct (use container IP if necessary)
port = 4444L,
browserName = "firefox",          # Ensure 'firefox' is specified as the browser
extraCapabilities = list(
"moz:firefoxOptions" = list(
args = list("--headless")     # If you want headless mode, keep this, else remove it
)
)
)
# Open the browser
remDr$open()
# Navigate to a website
url <- "https://www.google.com"
remDr$navigate(url)
# Wait for the page to load
Sys.sleep(3)
# Get the title of the page
page_title <- remDr$getTitle()
print(page_title)
# Extract the page source (for further scraping)
page_source <- remDr$getPageSource()
print(page_source)
library(RSelenium)
# Load the RSelenium library
library(RSelenium)
# Connect to the Selenium server
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445,
browserName = "firefox"
)
# Open the browser
remDr$open()
# Navigate to Google
remDr$navigate("https://www.google.com")
# Get the title of the page
title <- remDr$getTitle()
print(title)
# Close the browser
remDr$close()
# Load the RSelenium library
library(RSelenium)
# Define Firefox capabilities
capabilities <- list(
"moz:firefoxOptions" = list(
args = list("--headless")  # Run in headless mode (optional)
)
)
# Connect to the Selenium server with capabilities
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445,
browserName = "firefox",
extraCapabilities = capabilities
)
# Open the browser
remDr$open()
# Navigate to Google
remDr$navigate("https://www.google.com")
# Get the title of the page
title <- remDr$getTitle()
print(title)
# Close the browser
remDr$close()
# Load the RSelenium library
library(RSelenium)
# Define Firefox capabilities
capabilities <- list(
browserName = "firefox",
version = "136.0",
platform = "LINUX",
moz:firefoxOptions = list(
capabilities <- list(
browserName = "firefox",
version = "136.0",
platform = "linux",
moz:firefoxOptions = list(
capabilities <- list(
browserName = "firefox",
version = "136.0",
platform = "linux",
moz:firefoxOptions = list(
# Define Firefox capabilities
capabilities <- list(
"moz:firefoxOptions" = list(
args = list("--headless")  # Run in headless mode (optional)
)
)
library(RSelenium)
# Define Firefox capabilities
capabilities <- list(
browserName = "firefox",
version = "136.0",
platform = "LINUX",
moz:firefoxOptions = list(
capabilities <- list(
browserName = "firefox",
version = "136.0",
platform = "LINUX",
`moz:firefoxOptions` = list(
binary = "/usr/bin/firefox"
)
)
remDr <- remoteDriver(
remoteServerAddr = "localhost",  # Docker host
port = 4445,                     # Port mapped in docker-compose
browserName = "firefox",
extraCapabilities = capabilities  # Explicit capabilities
)
# Open the browser
remDr$open()
# Check if the session was created successfully
if (is.na(remDr$sessionInfo$id)) {
stop("Failed to create a session. Check Selenium server logs.")
}
# Load the RSelenium library
library(RSelenium)
# Define Firefox capabilities
capabilities <- list(
browserName = "firefox",
version = "136.0",
platform = "LINUX",
`moz:firefoxOptions` = list(
binary = "/usr/bin/firefox"
)
)
# Connect to the Selenium server with capabilities
remDr <- remoteDriver(
remoteServerAddr = "localhost",  # Docker host
port = 4445,                     # Port mapped in docker-compose
browserName = "firefox",
extraCapabilities = capabilities  # Explicit capabilities
)
# Open the browser
remDr$open()
# Check if the session was created successfully
if (is.na(remDr$sessionInfo$id)) {
stop("Failed to create a session. Check Selenium server logs.")
}
library(RSelenium)
# Define Firefox capabilities
capabilities <- list(
browserName = "firefox",
version = "136.0",
platform = "linux",
`moz:firefoxOptions` = list(
binary = "/usr/bin/firefox"
)
)
# Connect to the Selenium server with capabilities
remDr <- remoteDriver(
remoteServerAddr = "localhost",  # Docker host
port = 4445,                     # Port mapped in docker-compose
browserName = "firefox",
extraCapabilities = capabilities  # Explicit capabilities
)
# Open the browser
remDr$open()
# Check if the session was created successfully
if (is.na(remDr$sessionInfo$id)) {
stop("Failed to create a session. Check Selenium server logs.")
}
library(RSelenium)
remDr <- remoteDriver(
remoteServerAddr = "localhost",  # Adjust if necessary, e.g., if using a different machine
port = 4445L,  # Make sure it matches the port in your docker-compose.yml
browserName = "chrome"  # Selenium will automatically choose Chromium if it's available
)
remDr$open()
# Check if the session was created successfully
if (is.na(remDr$sessionInfo$id)) {
stop("Failed to create a session. Check Selenium server logs.")
}
# Start the remote driver with Chromium
remDr <- remoteDriver(
remoteServerAddr = "localhost",
port = 4445L,
browserName = "chrome"  # Selenium will automatically choose Chromium if it's available
)
# Open the browser
remDr$open()
# Check if the session was created successfully
if (is.na(remDr$sessionInfo$id)) {
stop("Failed to create a session. Check Selenium server logs.")
}
library(httr)
library(jsonlite)
url <- "https://api2.waqi.info/api/feed/@10493/aqi.json"
response <- GET(url, query = list())
if (status_code(response) == 200) {
# Parse the response content
data <- content(response, "text")
parsed_data <- fromJSON(data)
# Print the parsed data (optional)
print(parsed_data)
# Save the data to a file (JSON format)
output_file <- "kathmandu_aqi_data.json"
write_json(parsed_data, output_file, pretty = TRUE)
cat("Data saved to", output_file, "\n")
} else {
cat("Error: Unable to fetch data. Status code:", status_code(response), "\n")
}
getwd()
library(httr)
library(jsonlite)
getwd()
setwd("~/projects/tilak/mds1/R-programming")
# Define the API URL and your API key
url <- "https://api2.waqi.info/api/feed/@10493/aqi.json"
# api_key <- "your_api_key_here"  # Replace with your actual API key
# Make the GET request to the API
response <- GET(url, query = list())
# Check if the response was successful (status code 200)
if (status_code(response) == 200) {
# Parse the response content
data <- content(response, "text")
parsed_data <- fromJSON(data)
# Print the parsed data (optional)
print(parsed_data)
# Save the data to a file (JSON format)
output_file <- "outputs/kathmandu_aqi_data.json"
write_json(parsed_data, output_file, pretty = TRUE)
cat("Data saved to", output_file, "\n")
} else {
cat("Error: Unable to fetch data. Status code:", status_code(response), "\n")
}
library(httr)
library(jsonlite)
getwd()
setwd("~/projects/tilak/mds1/R-programming")
# Define the API URL and your API key
url <- "https://api2.waqi.info/api/feed/@10493/aqi.json"
# api_key <- "your_api_key_here"  # Replace with your actual API key
# Make the GET request to the API
response <- GET(url, query = list())
# Check if the response was successful (status code 200)
if (status_code(response) == 200) {
# Parse the response content
data <- content(response, "text")
parsed_data <- fromJSON(data)
# Print the parsed data (optional)
print(parsed_data)
# Save the data to a file (JSON format)
output_file <- "output/kathmandu_aqi_data.json"
write_json(parsed_data, output_file, pretty = TRUE)
cat("Data saved to", output_file, "\n")
} else {
cat("Error: Unable to fetch data. Status code:", status_code(response), "\n")
}
